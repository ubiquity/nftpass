{
  "address": "0x0C8ea6F5B30dE9E03a5e516E7165ee49BE697275",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "SetDefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "SetMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "SetTokenRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ntype",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        }
      ],
      "name": "SetTokenURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "batchSafeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "resetTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newTokenMutableURI",
          "type": "string"
        }
      ],
      "name": "setTokenMutableURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ntype",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newTokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16a5195efdd1eaafc82a558c65307d9ee481509cc91adba855eb9a50da736a32",
  "receipt": {
    "to": null,
    "from": "0x6eebAe27d69fa80f0E4C0E973A2Fed218A56880c",
    "contractAddress": "0x0C8ea6F5B30dE9E03a5e516E7165ee49BE697275",
    "transactionIndex": 6,
    "gasUsed": "2561694",
    "logsBloom": "0x
    "blockHash": "0x7f744efa7df4be9fc2e397499a2590cd365d4a81c3944e0643fe7d5320c39d6c",
    "transactionHash": "0x16a5195efdd1eaafc82a558c65307d9ee481509cc91adba855eb9a50da736a32",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10619310,
        "transactionHash": "0x16a5195efdd1eaafc82a558c65307d9ee481509cc91adba855eb9a50da736a32",
        "address": "0x0C8ea6F5B30dE9E03a5e516E7165ee49BE697275",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x7f744efa7df4be9fc2e397499a2590cd365d4a81c3944e0643fe7d5320c39d6c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 10619310,
        "transactionHash": "0x16a5195efdd1eaafc82a558c65307d9ee481509cc91adba855eb9a50da736a32",
        "address": "0x0C8ea6F5B30dE9E03a5e516E7165ee49BE697275",
        "topics": [
          "0xcec52196e972044edde8689a1b608e459c5946b7f3e5c8cd3d6d8e126d422e1c"
        ],
        "data": "0x0000000000000000000000006eebae27d69fa80f0e4c0e973a2fed218a56880c",
        "logIndex": 19,
        "blockHash": "0x7f744efa7df4be9fc2e397499a2590cd365d4a81c3944e0643fe7d5320c39d6c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 10619310,
        "transactionHash": "0x16a5195efdd1eaafc82a558c65307d9ee481509cc91adba855eb9a50da736a32",
        "address": "0x0C8ea6F5B30dE9E03a5e516E7165ee49BE697275",
        "topics": [
          "0xd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005068747470733a2f2f697066732e696f2f697066732f6261667962656966356c61763232766e3675716b61797566677435366463696473626e7135666c376c376e7879776d67667a366f3236376533753400000000000000000000000000000000",
        "logIndex": 20,
        "blockHash": "0x7f744efa7df4be9fc2e397499a2590cd365d4a81c3944e0643fe7d5320c39d6c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 10619310,
        "transactionHash": "0x16a5195efdd1eaafc82a558c65307d9ee481509cc91adba855eb9a50da736a32",
        "address": "0x0C8ea6F5B30dE9E03a5e516E7165ee49BE697275",
        "topics": [
          "0xd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005068747470733a2f2f697066732e696f2f697066732f62616679626569626f7968366a6f61766e616a7171327532776f64376b6678656b7672693769756c7a72696a77656b6a367664346773346361766900000000000000000000000000000000",
        "logIndex": 21,
        "blockHash": "0x7f744efa7df4be9fc2e397499a2590cd365d4a81c3944e0643fe7d5320c39d6c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 10619310,
        "transactionHash": "0x16a5195efdd1eaafc82a558c65307d9ee481509cc91adba855eb9a50da736a32",
        "address": "0x0C8ea6F5B30dE9E03a5e516E7165ee49BE697275",
        "topics": [
          "0xd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005068747470733a2f2f697066732e696f2f697066732f62616679626569647269346e66723668343461636573667a696f327862756a7363696178786161773535716166337675697a6d776568793669637500000000000000000000000000000000",
        "logIndex": 22,
        "blockHash": "0x7f744efa7df4be9fc2e397499a2590cd365d4a81c3944e0643fe7d5320c39d6c"
      }
    ],
    "blockNumber": 10619310,
    "cumulativeGasUsed": "5741488",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "https://ipfs.io/ipfs/bafybeif5lav22vn6uqkayufgt56dcidsbnq5fl7l7nxywmgfz6o267e3u4",
      "https://ipfs.io/ipfs/bafybeiboyh6joavnajqq2u2wod7kfxekvri7iulzrijwekj6vd4gs4cavi",
      "https://ipfs.io/ipfs/bafybeidri4nfr6h44acesfzio2xbujsciaxxaaw55qaf3vuizmwehy6icu"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "7ac2f7d8a205e76c8ed303a5644ccfe5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"SetDefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"SetTokenRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ntype\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"}],\"name\":\"SetTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"batchSafeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"resetTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newTokenMutableURI\",\"type\":\"string\"}],\"name\":\"setTokenMutableURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ntype\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newTokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchSafeMint(address,uint256)\":{\"params\":{\"count\":\": number of NFTs to mint for the owner\",\"to\":\": owner address of the minted NFTs\"}},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resetTokenRoyalty(uint256)\":{\"params\":{\"tokenID\":\": token ID\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeMint(address)\":{\"params\":{\"to\":\": owner address of the minted NFT\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\": fee Numerator, over 10000\",\"receiver\":\": address of the royalty receiver\"}},\"setMinter(address)\":{\"params\":{\"minter_\":\": minter address\"}},\"setTokenMutableURI(uint256,string)\":{\"params\":{\"newTokenMutableURI\":\": token URI\",\"tokenID\":\": token ID\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\": fee Numerator, over 10000\",\"receiver\":\": address of the royalty receiver\",\"tokenID\":\": token ID\"}},\"setTokenURI(uint256,string)\":{\"params\":{\"newTokenURI\":\": token URI associated with the type\",\"ntype\":\": NFT type : STANDARD_TYPE 0, GOLD_TYPE 1 or INVISIBLE_TYPE 2\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\": interface ID\"},\"returns\":{\"_0\":\"true if the interface is implemented\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenID\":\": tokenID to get tokenURI\"},\"returns\":{\"uri\":\"of the token\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TheUbiquityStick smartcontract\",\"version\":1},\"userdoc\":{\"events\":{\"SetDefaultRoyalty(address,uint96)\":{\"notice\":\"ROYALTY EVENTS\"},\"SetMinter(address)\":{\"notice\":\"MINTING EVENTS and FUNCTIONS\"}},\"kind\":\"user\",\"methods\":{\"batchSafeMint(address,uint256)\":{\"notice\":\"BATCH MINT function only allowed to minter\"},\"constructor\":{\"notice\":\"TheUbiquityStick constructorFirst owner is the deployer\"},\"deleteDefaultRoyalty()\":{\"notice\":\"DELETE default royalty configuration\"},\"minter()\":{\"notice\":\"MINTER address\"},\"resetTokenRoyalty(uint256)\":{\"notice\":\"RESET token royalty configuration\"},\"safeMint(address)\":{\"notice\":\"MINT function only allowed to minter\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"SET default royalty configuration\"},\"setMinter(address)\":{\"notice\":\"SET minter only allowed to owner\"},\"setTokenMutableURI(uint256,string)\":{\"notice\":\"SET tokenMutableURI, only allowed to owner\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"SET token royalty configuration\"},\"setTokenURI(uint256,string)\":{\"notice\":\"SET tokenURI, only allowed to minter\"},\"supportsInterface(bytes4)\":{\"notice\":\"pseudo random function\"},\"tokenIdNext()\":{\"notice\":\"tokenID of next minted NFTequal to the number of NFT already minted\"},\"tokenURI(uint256)\":{\"notice\":\"GET tokenURI\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheUbiquityStick.sol\":\"TheUbiquityStick\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xefc3d1b4250b3d598cb6bf7886b4466d8025f24e94ac9047b7074dfad3edba10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TheUbiquityStick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ITheUbiquityStick.sol\\\";\\n\\n/// @title TheUbiquityStick smartcontract\\ncontract TheUbiquityStick is ITheUbiquityStick, ERC721, ERC721Burnable, ERC721Enumerable, ERC2981, Ownable {\\n  ///\\n  /// @notice tokenID of next minted NFT\\n  /// @notice equal to the number of NFT already minted\\n  uint256 public tokenIdNext = 1;\\n\\n  /// @notice MINTER address\\n  address public minter;\\n\\n  /// @notice STANDARD NFT\\n  string private _tokenURI;\\n  uint256 private constant STANDARD_TYPE = 0;\\n\\n  /// @notice GOLD NFT\\n  string private _goldTokenURI;\\n  mapping(uint256 => bool) public gold;\\n  uint256 private constant GOLD_FREQ = 64;\\n  uint256 private constant GOLD_TYPE = 1;\\n\\n  /// @notice INVISIBLE NFT\\n  string private _invisibleTokenURI;\\n  uint256 private constant INVISIBLE_TOKEN_ID = 42;\\n  uint256 private constant INVISIBLE_TYPE = 2;\\n\\n  /// @notice MUTABLE NFTs mapping tokenURI\\n  mapping(uint256 => string) private _tokenURIs;\\n\\n  /// @notice onlyMinter, only minter\\n  modifier onlyMinter() {\\n    require(msg.sender == minter, \\\"Not minter\\\");\\n    _;\\n  }\\n\\n  /// @notice onlyNftOwner, only NFT owner\\n  modifier onlyNftOwner(uint256 tokenID) {\\n    require(msg.sender == ownerOf(tokenID), \\\"Not NFT owner\\\");\\n    _;\\n  }\\n\\n  /// @notice TheUbiquityStick constructor\\n  /// @notice First owner is the deployer\\n  constructor(string[] memory tokenURIs) ERC721(\\\"The UbiquiStick\\\", \\\"KEY\\\") {\\n    setMinter(msg.sender);\\n    setTokenURI(0, tokenURIs[0]);\\n    setTokenURI(1, tokenURIs[1]);\\n    setTokenURI(2, tokenURIs[2]);\\n  }\\n\\n  /// @notice GET tokenURI\\n  /// @param tokenID : tokenID to get tokenURI\\n  /// @return uri of the token\\n  function tokenURI(uint256 tokenID) public view override(ERC721) returns (string memory uri) {\\n    require(_exists(tokenID), \\\"Nonexistent token\\\");\\n\\n    if (_existsMutable(tokenID)) uri = _tokenURIs[tokenID];\\n    else if (gold[tokenID]) uri = _goldTokenURI;\\n    else if (tokenID == INVISIBLE_TOKEN_ID) uri = _invisibleTokenURI;\\n    else uri = _tokenURI;\\n  }\\n\\n  /// @notice SET tokenURI, only allowed to minter\\n  /// @param ntype : NFT type : STANDARD_TYPE 0, GOLD_TYPE 1 or INVISIBLE_TYPE 2\\n  /// @param newTokenURI : token URI associated with the type\\n  function setTokenURI(uint256 ntype, string memory newTokenURI) public override(ITheUbiquityStick) onlyMinter {\\n    if (ntype == STANDARD_TYPE) {\\n      _tokenURI = newTokenURI;\\n    } else if (ntype == GOLD_TYPE) {\\n      _goldTokenURI = newTokenURI;\\n    } else if (ntype == INVISIBLE_TYPE) {\\n      _invisibleTokenURI = newTokenURI;\\n    }\\n    emit SetTokenURI(ntype, newTokenURI);\\n  }\\n\\n  /// @notice SET tokenMutableURI, only allowed to owner\\n  /// @param tokenID : token ID\\n  /// @param newTokenMutableURI : token URI\\n  function setTokenMutableURI(uint256 tokenID, string memory newTokenMutableURI)\\n    public\\n    override(ITheUbiquityStick)\\n    onlyNftOwner(tokenID)\\n  {\\n    _tokenURIs[tokenID] = newTokenMutableURI;\\n  }\\n\\n  /// @notice SET minter only allowed to owner\\n  /// @param minter_ : minter address\\n  function setMinter(address minter_) public override(ITheUbiquityStick) onlyOwner {\\n    minter = minter_;\\n    emit SetMinter(minter);\\n  }\\n\\n  /// @notice MINT function only allowed to minter\\n  /// @param to : owner address of the minted NFT\\n  function safeMint(address to) public override(ITheUbiquityStick) onlyMinter {\\n    uint256 tokenID = tokenIdNext;\\n    tokenIdNext += 1;\\n\\n    // Gold one\\n    if (random() % uint256(GOLD_FREQ) == 0) {\\n      if (tokenID != INVISIBLE_TOKEN_ID) gold[tokenID] = true;\\n    }\\n    _safeMint(to, tokenID);\\n  }\\n\\n  /// @notice BATCH MINT function only allowed to minter\\n  /// @param to : owner address of the minted NFTs\\n  /// @param count : number of NFTs to mint for the owner\\n  function batchSafeMint(address to, uint256 count) public override(ITheUbiquityStick) onlyMinter {\\n    for (uint256 i = 0; i < count; i++) {\\n      safeMint(to);\\n    }\\n  }\\n\\n  /// @notice pseudo random function\\n  function random() private view returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, msg.sender, tokenIdNext)));\\n  }\\n\\n  /// @notice pseudo random function\\n  /// @param from : owner address of the sender\\n  /// @param to : owner address of the receiver\\n  /// @param tokenID : token ID of the NFT\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenID\\n  ) internal override(ERC721, ERC721Enumerable) {\\n    super._beforeTokenTransfer(from, to, tokenID);\\n  }\\n\\n  /// @notice pseudo random function\\n  function _existsMutable(uint256 tokenID) internal view virtual returns (bool) {\\n    return bytes(_tokenURIs[tokenID]).length > 0;\\n  }\\n\\n  /// @notice pseudo random function\\n  /// @param interfaceId : interface ID\\n  /// @return true if the interface is implemented\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721, ERC721Enumerable, ERC2981)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /// @notice SET default royalty configuration\\n  /// @param receiver : address of the royalty receiver\\n  /// @param feeNumerator : fee Numerator, over 10000\\n  function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyMinter {\\n    _setDefaultRoyalty(receiver, feeNumerator);\\n    emit SetDefaultRoyalty(receiver, feeNumerator);\\n  }\\n\\n  /// @notice SET token royalty configuration\\n  /// @param tokenID : token ID\\n  /// @param receiver : address of the royalty receiver\\n  /// @param feeNumerator : fee Numerator, over 10000\\n  function setTokenRoyalty(\\n    uint256 tokenID,\\n    address receiver,\\n    uint96 feeNumerator\\n  ) public onlyMinter {\\n    _setTokenRoyalty(tokenID, receiver, feeNumerator);\\n    emit SetTokenRoyalty(tokenID, receiver, feeNumerator);\\n  }\\n\\n  /// @notice RESET token royalty configuration\\n  /// @param tokenID : token ID\\n  function resetTokenRoyalty(uint256 tokenID) public onlyMinter {\\n    _resetTokenRoyalty(tokenID);\\n    emit SetTokenRoyalty(tokenID, address(0), 0);\\n  }\\n\\n  /// @notice DELETE default royalty configuration\\n  function deleteDefaultRoyalty() public onlyMinter {\\n    _deleteDefaultRoyalty();\\n    emit SetDefaultRoyalty(address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x8fdf563cab826b808c09f78f55712a2828121a07b222871ecbcf434a2c321b4a\",\"license\":\"MIT\"},\"contracts/interfaces/ITheUbiquityStick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ITheUbiquityStick {\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n  /// @notice MINTING EVENTS and FUNCTIONS\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n  event SetMinter(address minter);\\n\\n  event SetTokenURI(uint256 ntype, string contractURI);\\n\\n  function setMinter(address minter_) external;\\n\\n  function safeMint(address to) external;\\n\\n  function batchSafeMint(address, uint256) external;\\n\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n  /// @notice MUTABLE FUNCTIONS\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n  function setTokenURI(uint256 ntype, string memory newTokenURI) external;\\n\\n  function setTokenMutableURI(uint256 tokenID, string memory newTokenMutableURI) external;\\n\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n  /// @notice ROYALTY FUNCTIONS\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n  function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n  function setTokenRoyalty(\\n    uint256 tokenId,\\n    address receiver,\\n    uint96 feeNumerator\\n  ) external;\\n\\n  function resetTokenRoyalty(uint256 tokenId) external;\\n\\n  function deleteDefaultRoyalty() external;\\n\\n  /// @notice ROYALTY EVENTS\\n  event SetDefaultRoyalty(address receiver, uint96 feeNumerator);\\n  event SetTokenRoyalty(uint256 tokenID, address receiver, uint96 feeNumerator);\\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\\n}\\n\",\"keccak256\":\"0xb2791844313ef2cd78e028ce0c9ba3e9262e7de1160f9c3b991842d9101e06e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600d553480156200001657600080fd5b5060405162002bd638038062002bd683398101604081905262000039916200044e565b604080518082018252600f81526e54686520556269717569537469636b60881b6020808301918252835180850190945260038452624b455960e81b9084015281519192916200008b916000916200032c565b508051620000a19060019060208401906200032c565b505050620000be620000b86200013860201b60201c565b6200013c565b620000c9336200018e565b620000f9600082600081518110620000e557620000e562000578565b60200260200101516200024260201b60201c565b62000115600182600181518110620000e557620000e562000578565b62000131600282600281518110620000e557620000e562000578565b5062000607565b3390565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600c546001600160a01b03163314620001ee5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600e80546001600160a01b0319166001600160a01b0383169081179091556040519081527fcec52196e972044edde8689a1b608e459c5946b7f3e5c8cd3d6d8e126d422e1c9060200160405180910390a150565b600e546001600160a01b031633146200028b5760405162461bcd60e51b815260206004820152600a6024820152692737ba1036b4b73a32b960b11b6044820152606401620001e5565b81620002ad578051620002a690600f9060208401906200032c565b50620002ed565b6001821415620002cc578051620002a69060109060208401906200032c565b6002821415620002ed578051620002eb9060129060208401906200032c565b505b7fd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e8282604051620003209291906200058e565b60405180910390a15050565b8280546200033a90620005ca565b90600052602060002090601f0160209004810192826200035e5760008555620003a9565b82601f106200037957805160ff1916838001178555620003a9565b82800160010185558215620003a9579182015b82811115620003a95782518255916020019190600101906200038c565b50620003b7929150620003bb565b5090565b5b80821115620003b75760008155600101620003bc565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620004135762000413620003d2565b604052919050565b60005b83811015620004385781810151838201526020016200041e565b8381111562000448576000848401525b50505050565b600060208083850312156200046257600080fd5b82516001600160401b03808211156200047a57600080fd5b8185019150601f86818401126200049057600080fd5b825182811115620004a557620004a5620003d2565b8060051b620004b6868201620003e8565b918252848101860191868101908a841115620004d157600080fd5b87870192505b838310156200056a57825186811115620004f15760008081fd5b8701603f81018c13620005045760008081fd5b888101516040888211156200051d576200051d620003d2565b62000530828901601f19168c01620003e8565b8281528e82848601011115620005465760008081fd5b62000557838d83018487016200041b565b85525050509187019190870190620004d7565b9a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b8281526040602082015260008251806040840152620005b58160608501602087016200041b565b601f01601f1916919091016060019392505050565b600181811c90821680620005df57607f821691505b602082108114156200060157634e487b7160e01b600052602260045260246000fd5b50919050565b6125bf80620006176000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80634f6ccce71161011a5780638da5cb5b116100ad578063b88d4fde1161007c578063b88d4fde14610446578063c87b56dd14610459578063e985e9c51461046c578063f2fde38b146104a8578063fca3b5aa146104bb57600080fd5b80638da5cb5b1461041257806395d89b4114610423578063a22cb4651461042b578063aa1b103f1461043e57600080fd5b806370a08231116100e957806370a08231146103db578063715018a6146103ee5780638a616bc0146103f65780638bbf58b31461040957600080fd5b80634f6ccce71461038f5780635832bcfe146103a25780635944c753146103b55780636352211e146103c857600080fd5b806320c69e561161019257806333fc657c1161016157806333fc657c1461034357806340d097c31461035657806342842e0e1461036957806342966c681461037c57600080fd5b806320c69e56146102c857806323b872dd146102eb5780632a55205a146102fe5780632f745c591461033057600080fd5b8063081812fc116101ce578063081812fc1461027d578063095ea7b314610290578063162094c4146102a357806318160ddd146102b657600080fd5b806301ffc9a71461020057806304634d8d1461022857806306fdde031461023d5780630754617214610252575b600080fd5b61021361020e366004611f06565b6104ce565b60405190151581526020015b60405180910390f35b61023b610236366004611f58565b6104df565b005b61024561056b565b60405161021f9190611fd8565b600e54610265906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b61026561028b366004611feb565b6105fd565b61023b61029e366004612004565b610692565b61023b6102b13660046120ba565b6107a8565b6008545b60405190815260200161021f565b6102136102d6366004611feb565b60116020526000908152604090205460ff1681565b61023b6102f9366004612115565b61085b565b61031161030c366004612151565b61088d565b604080516001600160a01b03909316835260208301919091520161021f565b6102ba61033e366004612004565b610939565b61023b6103513660046120ba565b6109cf565b61023b610364366004612173565b610a4e565b61023b610377366004612115565b610ada565b61023b61038a366004611feb565b610af5565b6102ba61039d366004611feb565b610b6f565b61023b6103b0366004612004565b610c02565b61023b6103c336600461218e565b610c52565b6102656103d6366004611feb565b610cdc565b6102ba6103e9366004612173565b610d53565b61023b610dda565b61023b610404366004611feb565b610e10565b6102ba600d5481565b600c546001600160a01b0316610265565b610245610e91565b61023b6104393660046121ca565b610ea0565b61023b610eab565b61023b610454366004612206565b610f1a565b610245610467366004611feb565b610f4c565b61021361047a366004612282565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61023b6104b6366004612173565b61109f565b61023b6104c9366004612173565b611137565b60006104d9826111af565b92915050565b600e546001600160a01b031633146105125760405162461bcd60e51b8152600401610509906122ac565b60405180910390fd5b61051c82826111d4565b604080516001600160a01b03841681526001600160601b03831660208201527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a15050565b60606000805461057a906122d0565b80601f01602080910402602001604051908101604052809291908181526020018280546105a6906122d0565b80156105f35780601f106105c8576101008083540402835291602001916105f3565b820191906000526020600020905b8154815290600101906020018083116105d657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106765760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610509565b506000908152600460205260409020546001600160a01b031690565b600061069d82610cdc565b9050806001600160a01b0316836001600160a01b0316141561070b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610509565b336001600160a01b03821614806107275750610727813361047a565b6107995760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610509565b6107a3838361128e565b505050565b600e546001600160a01b031633146107d25760405162461bcd60e51b8152600401610509906122ac565b816107f05780516107ea90600f906020840190611e57565b5061082a565b600182141561080c5780516107ea906010906020840190611e57565b600282141561082a578051610828906012906020840190611e57565b505b7fd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e828260405161055f92919061230b565b610866335b826112fc565b6108825760405162461bcd60e51b815260040161050990612324565b6107a38383836113f3565b6000828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610902575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610921906001600160601b03168761238b565b61092b91906123c0565b915196919550909350505050565b600061094483610d53565b82106109a65760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610509565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b816109d981610cdc565b6001600160a01b0316336001600160a01b031614610a295760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b6044820152606401610509565b60008381526013602090815260409091208351610a4892850190611e57565b50505050565b600e546001600160a01b03163314610a785760405162461bcd60e51b8152600401610509906122ac565b600d8054906001906000610a8c83856123d4565b9091555060409050610a9c61159a565b610aa691906123ec565b610acc57602a8114610acc576000818152601160205260409020805460ff191660011790555b610ad682826115fb565b5050565b6107a383838360405180602001604052806000815250610f1a565b610afe33610860565b610b635760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610509565b610b6c81611615565b50565b6000610b7a60085490565b8210610bdd5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610509565b60088281548110610bf057610bf0612400565b90600052602060002001549050919050565b600e546001600160a01b03163314610c2c5760405162461bcd60e51b8152600401610509906122ac565b60005b818110156107a357610c4083610a4e565b80610c4a81612416565b915050610c2f565b600e546001600160a01b03163314610c7c5760405162461bcd60e51b8152600401610509906122ac565b610c878383836116bc565b604080518481526001600160a01b03841660208201526001600160601b0383168183015290517f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619181900360600190a1505050565b6000818152600260205260408120546001600160a01b0316806104d95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610509565b60006001600160a01b038216610dbe5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610509565b506001600160a01b031660009081526003602052604090205490565b600c546001600160a01b03163314610e045760405162461bcd60e51b815260040161050990612431565b610e0e6000611787565b565b600e546001600160a01b03163314610e3a5760405162461bcd60e51b8152600401610509906122ac565b6000818152600b602052604081205560408051828152600060208201819052918101919091527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff61906060015b60405180910390a150565b60606001805461057a906122d0565b610ad63383836117d9565b600e546001600160a01b03163314610ed55760405162461bcd60e51b8152600401610509906122ac565b610edf6000600a55565b60408051600080825260208201527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc910160405180910390a1565b610f2433836112fc565b610f405760405162461bcd60e51b815260040161050990612324565b610a48848484846118a8565b6000818152600260205260409020546060906001600160a01b0316610fa75760405162461bcd60e51b81526020600482015260116024820152702737b732bc34b9ba32b73a103a37b5b2b760791b6044820152606401610509565b610fb0826118db565b156110535760008281526013602052604090208054610fce906122d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffa906122d0565b80156110475780601f1061101c57610100808354040283529160200191611047565b820191906000526020600020905b81548152906001019060200180831161102a57829003601f168201915b50505050509050919050565b60008281526011602052604090205460ff16156110775760108054610fce906122d0565b602a82141561108d5760128054610fce906122d0565b600f8054610fce906122d0565b919050565b600c546001600160a01b031633146110c95760405162461bcd60e51b815260040161050990612431565b6001600160a01b03811661112e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610509565b610b6c81611787565b600c546001600160a01b031633146111615760405162461bcd60e51b815260040161050990612431565b600e80546001600160a01b0319166001600160a01b0383169081179091556040519081527fcec52196e972044edde8689a1b608e459c5946b7f3e5c8cd3d6d8e126d422e1c90602001610e86565b60006001600160e01b0319821663152a902d60e11b14806104d957506104d982611901565b6127106001600160601b03821611156111ff5760405162461bcd60e51b815260040161050990612466565b6001600160a01b0382166112555760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610509565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112c382610cdc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166113755760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610509565b600061138083610cdc565b9050806001600160a01b0316846001600160a01b031614806113c757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113eb5750836001600160a01b03166113e0846105fd565b6001600160a01b0316145b949350505050565b826001600160a01b031661140682610cdc565b6001600160a01b03161461146a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610509565b6001600160a01b0382166114cc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610509565b6114d7838383611926565b6114e260008261128e565b6001600160a01b038316600090815260036020526040812080546001929061150b9084906124b0565b90915550506001600160a01b03821660009081526003602052604081208054600192906115399084906123d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000444233600d546040516020016115dd9493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b6040516020818303038152906040528051906020012060001c905090565b610ad6828260405180602001604052806000815250611931565b600061162082610cdc565b905061162e81600084611926565b61163960008361128e565b6001600160a01b03811660009081526003602052604081208054600192906116629084906124b0565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6127106001600160601b03821611156116e75760405162461bcd60e51b815260040161050990612466565b6001600160a01b03821661173d5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610509565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600b90529190942093519051909116600160a01b029116179055565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561183b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610509565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6118b38484846113f3565b6118bf84848484611964565b610a485760405162461bcd60e51b8152600401610509906124c7565b600081815260136020526040812080548291906118f7906122d0565b9050119050919050565b60006001600160e01b0319821663780e9d6360e01b14806104d957506104d982611a71565b6107a3838383611ac1565b61193b8383611b79565b6119486000848484611964565b6107a35760405162461bcd60e51b8152600401610509906124c7565b60006001600160a01b0384163b15611a6657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119a8903390899088908890600401612519565b602060405180830381600087803b1580156119c257600080fd5b505af19250505080156119f2575060408051601f3d908101601f191682019092526119ef91810190612556565b60015b611a4c573d808015611a20576040519150601f19603f3d011682016040523d82523d6000602084013e611a25565b606091505b508051611a445760405162461bcd60e51b8152600401610509906124c7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113eb565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611aa257506001600160e01b03198216635b5e139f60e01b145b806104d957506301ffc9a760e01b6001600160e01b03198316146104d9565b6001600160a01b038316611b1c57611b1781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b3f565b816001600160a01b0316836001600160a01b031614611b3f57611b3f8382611cc7565b6001600160a01b038216611b56576107a381611d64565b826001600160a01b0316826001600160a01b0316146107a3576107a38282611e13565b6001600160a01b038216611bcf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610509565b6000818152600260205260409020546001600160a01b031615611c345760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610509565b611c4060008383611926565b6001600160a01b0382166000908152600360205260408120805460019290611c699084906123d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611cd484610d53565b611cde91906124b0565b600083815260076020526040902054909150808214611d31576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611d76906001906124b0565b60008381526009602052604081205460088054939450909284908110611d9e57611d9e612400565b906000526020600020015490508060088381548110611dbf57611dbf612400565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611df757611df7612573565b6001900381819060005260206000200160009055905550505050565b6000611e1e83610d53565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611e63906122d0565b90600052602060002090601f016020900481019282611e855760008555611ecb565b82601f10611e9e57805160ff1916838001178555611ecb565b82800160010185558215611ecb579182015b82811115611ecb578251825591602001919060010190611eb0565b50611ed7929150611edb565b5090565b5b80821115611ed75760008155600101611edc565b6001600160e01b031981168114610b6c57600080fd5b600060208284031215611f1857600080fd5b8135611f2381611ef0565b9392505050565b80356001600160a01b038116811461109a57600080fd5b80356001600160601b038116811461109a57600080fd5b60008060408385031215611f6b57600080fd5b611f7483611f2a565b9150611f8260208401611f41565b90509250929050565b6000815180845260005b81811015611fb157602081850181015186830182015201611f95565b81811115611fc3576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611f236020830184611f8b565b600060208284031215611ffd57600080fd5b5035919050565b6000806040838503121561201757600080fd5b61202083611f2a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561205f5761205f61202e565b604051601f8501601f19908116603f011681019082821181831017156120875761208761202e565b816040528093508581528686860111156120a057600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156120cd57600080fd5b82359150602083013567ffffffffffffffff8111156120eb57600080fd5b8301601f810185136120fc57600080fd5b61210b85823560208401612044565b9150509250929050565b60008060006060848603121561212a57600080fd5b61213384611f2a565b925061214160208501611f2a565b9150604084013590509250925092565b6000806040838503121561216457600080fd5b50508035926020909101359150565b60006020828403121561218557600080fd5b611f2382611f2a565b6000806000606084860312156121a357600080fd5b833592506121b360208501611f2a565b91506121c160408501611f41565b90509250925092565b600080604083850312156121dd57600080fd5b6121e683611f2a565b9150602083013580151581146121fb57600080fd5b809150509250929050565b6000806000806080858703121561221c57600080fd5b61222585611f2a565b935061223360208601611f2a565b925060408501359150606085013567ffffffffffffffff81111561225657600080fd5b8501601f8101871361226757600080fd5b61227687823560208401612044565b91505092959194509250565b6000806040838503121561229557600080fd5b61229e83611f2a565b9150611f8260208401611f2a565b6020808252600a90820152692737ba1036b4b73a32b960b11b604082015260600190565b600181811c908216806122e457607f821691505b6020821081141561230557634e487b7160e01b600052602260045260246000fd5b50919050565b8281526040602082015260006113eb6040830184611f8b565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156123a5576123a5612375565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826123cf576123cf6123aa565b500490565b600082198211156123e7576123e7612375565b500190565b6000826123fb576123fb6123aa565b500690565b634e487b7160e01b600052603260045260246000fd5b600060001982141561242a5761242a612375565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6000828210156124c2576124c2612375565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061254c90830184611f8b565b9695505050505050565b60006020828403121561256857600080fd5b8151611f2381611ef0565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b594c8775db445c05c1dc53c8216a6cf4bf4eca5c4da2779c97ddc9eacdd980d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80634f6ccce71161011a5780638da5cb5b116100ad578063b88d4fde1161007c578063b88d4fde14610446578063c87b56dd14610459578063e985e9c51461046c578063f2fde38b146104a8578063fca3b5aa146104bb57600080fd5b80638da5cb5b1461041257806395d89b4114610423578063a22cb4651461042b578063aa1b103f1461043e57600080fd5b806370a08231116100e957806370a08231146103db578063715018a6146103ee5780638a616bc0146103f65780638bbf58b31461040957600080fd5b80634f6ccce71461038f5780635832bcfe146103a25780635944c753146103b55780636352211e146103c857600080fd5b806320c69e561161019257806333fc657c1161016157806333fc657c1461034357806340d097c31461035657806342842e0e1461036957806342966c681461037c57600080fd5b806320c69e56146102c857806323b872dd146102eb5780632a55205a146102fe5780632f745c591461033057600080fd5b8063081812fc116101ce578063081812fc1461027d578063095ea7b314610290578063162094c4146102a357806318160ddd146102b657600080fd5b806301ffc9a71461020057806304634d8d1461022857806306fdde031461023d5780630754617214610252575b600080fd5b61021361020e366004611f06565b6104ce565b60405190151581526020015b60405180910390f35b61023b610236366004611f58565b6104df565b005b61024561056b565b60405161021f9190611fd8565b600e54610265906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b61026561028b366004611feb565b6105fd565b61023b61029e366004612004565b610692565b61023b6102b13660046120ba565b6107a8565b6008545b60405190815260200161021f565b6102136102d6366004611feb565b60116020526000908152604090205460ff1681565b61023b6102f9366004612115565b61085b565b61031161030c366004612151565b61088d565b604080516001600160a01b03909316835260208301919091520161021f565b6102ba61033e366004612004565b610939565b61023b6103513660046120ba565b6109cf565b61023b610364366004612173565b610a4e565b61023b610377366004612115565b610ada565b61023b61038a366004611feb565b610af5565b6102ba61039d366004611feb565b610b6f565b61023b6103b0366004612004565b610c02565b61023b6103c336600461218e565b610c52565b6102656103d6366004611feb565b610cdc565b6102ba6103e9366004612173565b610d53565b61023b610dda565b61023b610404366004611feb565b610e10565b6102ba600d5481565b600c546001600160a01b0316610265565b610245610e91565b61023b6104393660046121ca565b610ea0565b61023b610eab565b61023b610454366004612206565b610f1a565b610245610467366004611feb565b610f4c565b61021361047a366004612282565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61023b6104b6366004612173565b61109f565b61023b6104c9366004612173565b611137565b60006104d9826111af565b92915050565b600e546001600160a01b031633146105125760405162461bcd60e51b8152600401610509906122ac565b60405180910390fd5b61051c82826111d4565b604080516001600160a01b03841681526001600160601b03831660208201527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc91015b60405180910390a15050565b60606000805461057a906122d0565b80601f01602080910402602001604051908101604052809291908181526020018280546105a6906122d0565b80156105f35780601f106105c8576101008083540402835291602001916105f3565b820191906000526020600020905b8154815290600101906020018083116105d657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106765760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610509565b506000908152600460205260409020546001600160a01b031690565b600061069d82610cdc565b9050806001600160a01b0316836001600160a01b0316141561070b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610509565b336001600160a01b03821614806107275750610727813361047a565b6107995760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610509565b6107a3838361128e565b505050565b600e546001600160a01b031633146107d25760405162461bcd60e51b8152600401610509906122ac565b816107f05780516107ea90600f906020840190611e57565b5061082a565b600182141561080c5780516107ea906010906020840190611e57565b600282141561082a578051610828906012906020840190611e57565b505b7fd2d827dddfc9c9a02afc5fc68d3251684b36e213a7999ebd90a861f25df4077e828260405161055f92919061230b565b610866335b826112fc565b6108825760405162461bcd60e51b815260040161050990612324565b6107a38383836113f3565b6000828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610902575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610921906001600160601b03168761238b565b61092b91906123c0565b915196919550909350505050565b600061094483610d53565b82106109a65760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610509565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b816109d981610cdc565b6001600160a01b0316336001600160a01b031614610a295760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1037bbb732b960991b6044820152606401610509565b60008381526013602090815260409091208351610a4892850190611e57565b50505050565b600e546001600160a01b03163314610a785760405162461bcd60e51b8152600401610509906122ac565b600d8054906001906000610a8c83856123d4565b9091555060409050610a9c61159a565b610aa691906123ec565b610acc57602a8114610acc576000818152601160205260409020805460ff191660011790555b610ad682826115fb565b5050565b6107a383838360405180602001604052806000815250610f1a565b610afe33610860565b610b635760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610509565b610b6c81611615565b50565b6000610b7a60085490565b8210610bdd5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610509565b60088281548110610bf057610bf0612400565b90600052602060002001549050919050565b600e546001600160a01b03163314610c2c5760405162461bcd60e51b8152600401610509906122ac565b60005b818110156107a357610c4083610a4e565b80610c4a81612416565b915050610c2f565b600e546001600160a01b03163314610c7c5760405162461bcd60e51b8152600401610509906122ac565b610c878383836116bc565b604080518481526001600160a01b03841660208201526001600160601b0383168183015290517f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff619181900360600190a1505050565b6000818152600260205260408120546001600160a01b0316806104d95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610509565b60006001600160a01b038216610dbe5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610509565b506001600160a01b031660009081526003602052604090205490565b600c546001600160a01b03163314610e045760405162461bcd60e51b815260040161050990612431565b610e0e6000611787565b565b600e546001600160a01b03163314610e3a5760405162461bcd60e51b8152600401610509906122ac565b6000818152600b602052604081205560408051828152600060208201819052918101919091527f2595213009f64247e2789cf9981bcc53ee736a6aa52042a651aa1549ae6fff61906060015b60405180910390a150565b60606001805461057a906122d0565b610ad63383836117d9565b600e546001600160a01b03163314610ed55760405162461bcd60e51b8152600401610509906122ac565b610edf6000600a55565b60408051600080825260208201527fa1edde4ed5c1392c90dccd8e051a4080b761850e49a24c77d826348a51e1f8dc910160405180910390a1565b610f2433836112fc565b610f405760405162461bcd60e51b815260040161050990612324565b610a48848484846118a8565b6000818152600260205260409020546060906001600160a01b0316610fa75760405162461bcd60e51b81526020600482015260116024820152702737b732bc34b9ba32b73a103a37b5b2b760791b6044820152606401610509565b610fb0826118db565b156110535760008281526013602052604090208054610fce906122d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffa906122d0565b80156110475780601f1061101c57610100808354040283529160200191611047565b820191906000526020600020905b81548152906001019060200180831161102a57829003601f168201915b50505050509050919050565b60008281526011602052604090205460ff16156110775760108054610fce906122d0565b602a82141561108d5760128054610fce906122d0565b600f8054610fce906122d0565b919050565b600c546001600160a01b031633146110c95760405162461bcd60e51b815260040161050990612431565b6001600160a01b03811661112e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610509565b610b6c81611787565b600c546001600160a01b031633146111615760405162461bcd60e51b815260040161050990612431565b600e80546001600160a01b0319166001600160a01b0383169081179091556040519081527fcec52196e972044edde8689a1b608e459c5946b7f3e5c8cd3d6d8e126d422e1c90602001610e86565b60006001600160e01b0319821663152a902d60e11b14806104d957506104d982611901565b6127106001600160601b03821611156111ff5760405162461bcd60e51b815260040161050990612466565b6001600160a01b0382166112555760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610509565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112c382610cdc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166113755760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610509565b600061138083610cdc565b9050806001600160a01b0316846001600160a01b031614806113c757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113eb5750836001600160a01b03166113e0846105fd565b6001600160a01b0316145b949350505050565b826001600160a01b031661140682610cdc565b6001600160a01b03161461146a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610509565b6001600160a01b0382166114cc5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610509565b6114d7838383611926565b6114e260008261128e565b6001600160a01b038316600090815260036020526040812080546001929061150b9084906124b0565b90915550506001600160a01b03821660009081526003602052604081208054600192906115399084906123d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000444233600d546040516020016115dd9493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b6040516020818303038152906040528051906020012060001c905090565b610ad6828260405180602001604052806000815250611931565b600061162082610cdc565b905061162e81600084611926565b61163960008361128e565b6001600160a01b03811660009081526003602052604081208054600192906116629084906124b0565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6127106001600160601b03821611156116e75760405162461bcd60e51b815260040161050990612466565b6001600160a01b03821661173d5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610509565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600b90529190942093519051909116600160a01b029116179055565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561183b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610509565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6118b38484846113f3565b6118bf84848484611964565b610a485760405162461bcd60e51b8152600401610509906124c7565b600081815260136020526040812080548291906118f7906122d0565b9050119050919050565b60006001600160e01b0319821663780e9d6360e01b14806104d957506104d982611a71565b6107a3838383611ac1565b61193b8383611b79565b6119486000848484611964565b6107a35760405162461bcd60e51b8152600401610509906124c7565b60006001600160a01b0384163b15611a6657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119a8903390899088908890600401612519565b602060405180830381600087803b1580156119c257600080fd5b505af19250505080156119f2575060408051601f3d908101601f191682019092526119ef91810190612556565b60015b611a4c573d808015611a20576040519150601f19603f3d011682016040523d82523d6000602084013e611a25565b606091505b508051611a445760405162461bcd60e51b8152600401610509906124c7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113eb565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b1480611aa257506001600160e01b03198216635b5e139f60e01b145b806104d957506301ffc9a760e01b6001600160e01b03198316146104d9565b6001600160a01b038316611b1c57611b1781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b3f565b816001600160a01b0316836001600160a01b031614611b3f57611b3f8382611cc7565b6001600160a01b038216611b56576107a381611d64565b826001600160a01b0316826001600160a01b0316146107a3576107a38282611e13565b6001600160a01b038216611bcf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610509565b6000818152600260205260409020546001600160a01b031615611c345760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610509565b611c4060008383611926565b6001600160a01b0382166000908152600360205260408120805460019290611c699084906123d4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611cd484610d53565b611cde91906124b0565b600083815260076020526040902054909150808214611d31576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611d76906001906124b0565b60008381526009602052604081205460088054939450909284908110611d9e57611d9e612400565b906000526020600020015490508060088381548110611dbf57611dbf612400565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611df757611df7612573565b6001900381819060005260206000200160009055905550505050565b6000611e1e83610d53565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054611e63906122d0565b90600052602060002090601f016020900481019282611e855760008555611ecb565b82601f10611e9e57805160ff1916838001178555611ecb565b82800160010185558215611ecb579182015b82811115611ecb578251825591602001919060010190611eb0565b50611ed7929150611edb565b5090565b5b80821115611ed75760008155600101611edc565b6001600160e01b031981168114610b6c57600080fd5b600060208284031215611f1857600080fd5b8135611f2381611ef0565b9392505050565b80356001600160a01b038116811461109a57600080fd5b80356001600160601b038116811461109a57600080fd5b60008060408385031215611f6b57600080fd5b611f7483611f2a565b9150611f8260208401611f41565b90509250929050565b6000815180845260005b81811015611fb157602081850181015186830182015201611f95565b81811115611fc3576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611f236020830184611f8b565b600060208284031215611ffd57600080fd5b5035919050565b6000806040838503121561201757600080fd5b61202083611f2a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561205f5761205f61202e565b604051601f8501601f19908116603f011681019082821181831017156120875761208761202e565b816040528093508581528686860111156120a057600080fd5b858560208301376000602087830101525050509392505050565b600080604083850312156120cd57600080fd5b82359150602083013567ffffffffffffffff8111156120eb57600080fd5b8301601f810185136120fc57600080fd5b61210b85823560208401612044565b9150509250929050565b60008060006060848603121561212a57600080fd5b61213384611f2a565b925061214160208501611f2a565b9150604084013590509250925092565b6000806040838503121561216457600080fd5b50508035926020909101359150565b60006020828403121561218557600080fd5b611f2382611f2a565b6000806000606084860312156121a357600080fd5b833592506121b360208501611f2a565b91506121c160408501611f41565b90509250925092565b600080604083850312156121dd57600080fd5b6121e683611f2a565b9150602083013580151581146121fb57600080fd5b809150509250929050565b6000806000806080858703121561221c57600080fd5b61222585611f2a565b935061223360208601611f2a565b925060408501359150606085013567ffffffffffffffff81111561225657600080fd5b8501601f8101871361226757600080fd5b61227687823560208401612044565b91505092959194509250565b6000806040838503121561229557600080fd5b61229e83611f2a565b9150611f8260208401611f2a565b6020808252600a90820152692737ba1036b4b73a32b960b11b604082015260600190565b600181811c908216806122e457607f821691505b6020821081141561230557634e487b7160e01b600052602260045260246000fd5b50919050565b8281526040602082015260006113eb6040830184611f8b565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156123a5576123a5612375565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826123cf576123cf6123aa565b500490565b600082198211156123e7576123e7612375565b500190565b6000826123fb576123fb6123aa565b500690565b634e487b7160e01b600052603260045260246000fd5b600060001982141561242a5761242a612375565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6000828210156124c2576124c2612375565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061254c90830184611f8b565b9695505050505050565b60006020828403121561256857600080fd5b8151611f2381611ef0565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220b594c8775db445c05c1dc53c8216a6cf4bf4eca5c4da2779c97ddc9eacdd980d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchSafeMint(address,uint256)": {
        "params": {
          "count": ": number of NFTs to mint for the owner",
          "to": ": owner address of the minted NFTs"
        }
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resetTokenRoyalty(uint256)": {
        "params": {
          "tokenID": ": token ID"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeMint(address)": {
        "params": {
          "to": ": owner address of the minted NFT"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setDefaultRoyalty(address,uint96)": {
        "params": {
          "feeNumerator": ": fee Numerator, over 10000",
          "receiver": ": address of the royalty receiver"
        }
      },
      "setMinter(address)": {
        "params": {
          "minter_": ": minter address"
        }
      },
      "setTokenMutableURI(uint256,string)": {
        "params": {
          "newTokenMutableURI": ": token URI",
          "tokenID": ": token ID"
        }
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "params": {
          "feeNumerator": ": fee Numerator, over 10000",
          "receiver": ": address of the royalty receiver",
          "tokenID": ": token ID"
        }
      },
      "setTokenURI(uint256,string)": {
        "params": {
          "newTokenURI": ": token URI associated with the type",
          "ntype": ": NFT type : STANDARD_TYPE 0, GOLD_TYPE 1 or INVISIBLE_TYPE 2"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": ": interface ID"
        },
        "returns": {
          "_0": "true if the interface is implemented"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenID": ": tokenID to get tokenURI"
        },
        "returns": {
          "uri": "of the token"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TheUbiquityStick smartcontract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "SetDefaultRoyalty(address,uint96)": {
        "notice": "ROYALTY EVENTS"
      },
      "SetMinter(address)": {
        "notice": "MINTING EVENTS and FUNCTIONS"
      }
    },
    "kind": "user",
    "methods": {
      "batchSafeMint(address,uint256)": {
        "notice": "BATCH MINT function only allowed to minter"
      },
      "constructor": {
        "notice": "TheUbiquityStick constructorFirst owner is the deployer"
      },
      "deleteDefaultRoyalty()": {
        "notice": "DELETE default royalty configuration"
      },
      "minter()": {
        "notice": "MINTER address"
      },
      "resetTokenRoyalty(uint256)": {
        "notice": "RESET token royalty configuration"
      },
      "safeMint(address)": {
        "notice": "MINT function only allowed to minter"
      },
      "setDefaultRoyalty(address,uint96)": {
        "notice": "SET default royalty configuration"
      },
      "setMinter(address)": {
        "notice": "SET minter only allowed to owner"
      },
      "setTokenMutableURI(uint256,string)": {
        "notice": "SET tokenMutableURI, only allowed to owner"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "notice": "SET token royalty configuration"
      },
      "setTokenURI(uint256,string)": {
        "notice": "SET tokenURI, only allowed to minter"
      },
      "supportsInterface(bytes4)": {
        "notice": "pseudo random function"
      },
      "tokenIdNext()": {
        "notice": "tokenID of next minted NFTequal to the number of NFT already minted"
      },
      "tokenURI(uint256)": {
        "notice": "GET tokenURI"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 491,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 493,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 497,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 501,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 505,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 511,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1510,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1514,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1517,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1521,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1908,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RoyaltyInfo)1905_storage"
      },
      {
        "astId": 1913,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1905_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2670,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "tokenIdNext",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2673,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "minter",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2676,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_tokenURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2682,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_goldTokenURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 2686,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "gold",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2695,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_invisibleTokenURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 2706,
        "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1905_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1905_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1905_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1902,
            "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1904,
            "contract": "contracts/TheUbiquityStick.sol:TheUbiquityStick",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}