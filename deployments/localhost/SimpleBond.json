{
  "address": "0xa997E480A69951efd537ec9C462Bc66b116628aA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenRewards_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingBlocks_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        }
      ],
      "name": "LogBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "LogClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsRatio",
          "type": "uint256"
        }
      ],
      "name": "LogSetRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bonds",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "bondsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "claimBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "rewardsBondOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "rewardsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardsRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenRewardsRatio",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vestingBlocks_",
          "type": "uint256"
        }
      ],
      "name": "setVestingBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9de9eb04403e066c36af6508c22292449a30fd51b1eb02dc3e96aeaa75b63978",
  "receipt": {
    "to": null,
    "from": "0x0edff6CFb364a61a2c9F5f2CDBcFefCAdbE5c493",
    "contractAddress": "0xa997E480A69951efd537ec9C462Bc66b116628aA",
    "transactionIndex": 0,
    "gasUsed": "1241279",
    "logsBloom": "0x
    "blockHash": "0xfa658aeb0e3685438296cd61c916e1bf0d2fc26d038038b7786bb203300640df",
    "transactionHash": "0x9de9eb04403e066c36af6508c22292449a30fd51b1eb02dc3e96aeaa75b63978",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13856901,
        "transactionHash": "0x9de9eb04403e066c36af6508c22292449a30fd51b1eb02dc3e96aeaa75b63978",
        "address": "0xa997E480A69951efd537ec9C462Bc66b116628aA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000edff6cfb364a61a2c9f5f2cdbcfefcadbe5c493"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfa658aeb0e3685438296cd61c916e1bf0d2fc26d038038b7786bb203300640df"
      }
    ],
    "blockNumber": 13856901,
    "cumulativeGasUsed": "1241279",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf351c71e7199aD6669B1C6f5f507FabdE4054f04",
    32300,
    "0xefC0e701A824943b469a694aC564Aa1efF7Ab7dd"
  ],
  "solcInputHash": "615ade76ee6f7eb6eab81cf18343df13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenRewards_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingBlocks_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"}],\"name\":\"LogBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsRatio\",\"type\":\"uint256\"}],\"name\":\"LogSetRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"bondsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rewardsBondOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"rewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenRewardsRatio\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingBlocks_\",\"type\":\"uint256\"}],\"name\":\"setVestingBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"zapaz.eth\",\"details\":\"Bond is Ownable, access controled by onlyOwnerUse SafeERC20\",\"kind\":\"dev\",\"methods\":{\"bond(address,uint256)\":{\"params\":{\"amount\":\"amount of token to bond\",\"token\":\"bonded token address\"},\"returns\":{\"bondId\":\"Bond id\"}},\"bondsCount(address)\":{\"returns\":{\"_0\":\"number of bonds\"}},\"claim()\":{\"returns\":{\"claimed\":\"Rewards claimed succesfully\"}},\"claimBond(uint256)\":{\"returns\":{\"claimed\":\"Rewards claimed succesfully\"}},\"constructor\":{\"params\":{\"tokenRewards_\":\"Rewards token address\",\"vestingBlocks_\":\"Vesting duration in blocks\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardsBondOf(address,uint256)\":{\"returns\":{\"rewards\":\"Amount of rewards\",\"rewardsClaimable\":\"Amount of still claimable rewards\",\"rewardsClaimed\":\"Amount of rewards already claimed\"}},\"rewardsOf(address)\":{\"returns\":{\"rewards\":\"Amount of rewards\",\"rewardsClaimable\":\"Amount of still claimable rewards\",\"rewardsClaimed\":\"Amount of rewards already claimed\"}},\"setRewards(address,uint256)\":{\"params\":{\"token\":\"token address\",\"tokenRewardsRatio\":\"rewardsRatio for this token\"}},\"setTreasury(address)\":{\"params\":{\"treasury_\":\"treasury address\"}},\"setVestingBlocks(uint256)\":{\"params\":{\"vestingBlocks_\":\"vesting duration in blocks\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"amount withdraw\",\"token\":\"token withdraw\"}}},\"stateVariables\":{\"bonds\":{\"details\":\"bond index starts at 0 for each address\"},\"rewardsRatio\":{\"details\":\"rewardsRatio is per billion of token bonded\"},\"vestingBlocks\":{\"details\":\"defined in number of block\"}},\"title\":\"Simple Bond\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bond(address,uint256)\":{\"notice\":\"Bond tokens\"},\"bonds(address,uint256)\":{\"notice\":\"Bonds for each address\"},\"bondsCount(address)\":{\"notice\":\"Get number of bonds for address\"},\"claim()\":{\"notice\":\"Claim all rewards\"},\"claimBond(uint256)\":{\"notice\":\"Claim bond rewards\"},\"constructor\":{\"notice\":\"Simple Bond constructor\"},\"pause()\":{\"notice\":\"Pause Bonding and Claiming\"},\"rewardsBondOf(address,uint256)\":{\"notice\":\"Bond rewards balance: amount and already claimed\"},\"rewardsOf(address)\":{\"notice\":\"Bond rewards balance: amount and already claimed\"},\"rewardsRatio(address)\":{\"notice\":\"Rewards ratio for token bonded\"},\"setRewards(address,uint256)\":{\"notice\":\"Set Rewards for specific Token\"},\"setTreasury(address)\":{\"notice\":\"Set treasury address\"},\"setVestingBlocks(uint256)\":{\"notice\":\"Set vesting duration\"},\"tokenRewards()\":{\"notice\":\"Rewards token address\"},\"totalClaimedRewards()\":{\"notice\":\"Total rewards claimed\"},\"totalRewards()\":{\"notice\":\"Total rewards\"},\"treasury()\":{\"notice\":\"Treasury address\"},\"unpause()\":{\"notice\":\"Unpause Bonding and Claiming\"},\"vestingBlocks()\":{\"notice\":\"Vesting period\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw token from the smartcontract, only for owner\"}},\"notice\":\"SimpleBond is a simple Bond mecanism, allowing to sell tokens bonded and get rewards tokensThe reward token is fully claimable only after the vesting period\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleBond.sol\":\"SimpleBond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/SimpleBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISimpleBond.sol\\\";\\nimport \\\"./interfaces/IUAR.sol\\\";\\n\\n/// @title Simple Bond\\n/// @author zapaz.eth\\n/// @notice SimpleBond is a simple Bond mecanism, allowing to sell tokens bonded and get rewards tokens\\n/// @notice The reward token is fully claimable only after the vesting period\\n/// @dev Bond is Ownable, access controled by onlyOwner\\n/// @dev Use SafeERC20\\ncontract SimpleBond is ISimpleBond, Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n\\n  struct Bond {\\n    address token;\\n    uint256 amount;\\n    uint256 rewards;\\n    uint256 claimed;\\n    uint256 block;\\n  }\\n\\n  /// Rewards token address\\n  address public immutable tokenRewards;\\n\\n  /// Rewards ratio for token bonded\\n  /// @dev rewardsRatio is per billion of token bonded\\n  mapping(address => uint256) public rewardsRatio;\\n\\n  /// Vesting period\\n  /// @dev defined in number of block\\n  uint256 public vestingBlocks;\\n\\n  /// Bonds for each address\\n  /// @dev bond index starts at 0 for each address\\n  mapping(address => Bond[]) public bonds;\\n\\n  /// Total rewards\\n  uint256 public totalRewards;\\n\\n  /// Total rewards claimed\\n  uint256 public totalClaimedRewards;\\n\\n  /// Treasury address\\n  address public treasury;\\n\\n  /// Simple Bond constructor\\n  /// @param tokenRewards_ Rewards token address\\n  /// @param vestingBlocks_ Vesting duration in blocks\\n  constructor(\\n    address tokenRewards_,\\n    uint256 vestingBlocks_,\\n    address treasury_\\n  ) {\\n    require(tokenRewards_ != address(0), \\\"Invalid Reward token\\\");\\n    tokenRewards = tokenRewards_;\\n    setVestingBlocks(vestingBlocks_);\\n    setTreasury(treasury_);\\n  }\\n\\n  /// @notice Set Rewards for specific Token\\n  /// @param token token address\\n  /// @param tokenRewardsRatio rewardsRatio for this token\\n  function setRewards(address token, uint256 tokenRewardsRatio) public override onlyOwner {\\n    require(token != address(0), \\\"Invalid Reward token\\\");\\n    rewardsRatio[token] = tokenRewardsRatio;\\n\\n    emit LogSetRewards(token, tokenRewardsRatio);\\n  }\\n\\n  /// @notice Set vesting duration\\n  /// @param vestingBlocks_ vesting duration in blocks\\n  function setVestingBlocks(uint256 vestingBlocks_) public override onlyOwner {\\n    require(vestingBlocks_ > 0, \\\"Invalid Vesting blocks number\\\");\\n    vestingBlocks = vestingBlocks_;\\n  }\\n\\n  /// @notice Set treasury address\\n  /// @param treasury_ treasury address\\n  function setTreasury(address treasury_) public override onlyOwner {\\n    require(treasury_ != address(0), \\\"Invalid Treasury address\\\");\\n    treasury = treasury_;\\n  }\\n\\n  /// @notice Pause Bonding and Claiming\\n  function pause() public override onlyOwner {\\n    _pause();\\n  }\\n\\n  /// @notice Unpause Bonding and Claiming\\n  function unpause() public override onlyOwner {\\n    _unpause();\\n  }\\n\\n  /// @notice Bond tokens\\n  /// @param token bonded token address\\n  /// @param amount amount of token to bond\\n  /// @return bondId Bond id\\n  function bond(address token, uint256 amount) public override whenNotPaused returns (uint256 bondId) {\\n    require(rewardsRatio[token] > 0, \\\"Token not allowed\\\");\\n\\n    // @dev throws if not enough allowance or tokens for address\\n    // @dev must set token allowance for this smartcontract previously\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n    Bond memory bnd;\\n    bnd.token = token;\\n    bnd.amount = amount;\\n    bnd.block = block.number;\\n\\n    uint256 rewards = (amount * rewardsRatio[token]) / 1_000_000_000;\\n    bnd.rewards = rewards;\\n    totalRewards += rewards;\\n\\n    bondId = bonds[msg.sender].length;\\n    bonds[msg.sender].push(bnd);\\n\\n    emit LogBond(msg.sender, bnd.token, bnd.amount, bnd.rewards, bnd.block, bondId);\\n  }\\n\\n  /// @notice Claim all rewards\\n  /// @return claimed Rewards claimed succesfully\\n  function claim() public override whenNotPaused returns (uint256 claimed) {\\n    for (uint256 index = 0; (index < bonds[msg.sender].length); index += 1) {\\n      claimed += claimBond(index);\\n    }\\n  }\\n\\n  /// @notice Claim bond rewards\\n  /// @return claimed Rewards claimed succesfully\\n  function claimBond(uint256 index) public override whenNotPaused returns (uint256 claimed) {\\n    Bond storage bnd = bonds[msg.sender][index];\\n    uint256 claimAmount = _bondClaimableRewards(bnd);\\n\\n    if (claimAmount > 0) {\\n      bnd.claimed += claimAmount;\\n      totalClaimedRewards += claimAmount;\\n\\n      assert(bnd.claimed <= bnd.rewards);\\n      IUAR(tokenRewards).raiseCapital(claimAmount);\\n      IERC20(tokenRewards).safeTransferFrom(treasury, msg.sender, claimAmount);\\n    }\\n\\n    emit LogClaim(msg.sender, index, claimed);\\n  }\\n\\n  /// @notice Withdraw token from the smartcontract, only for owner\\n  /// @param  token token withdraw\\n  /// @param amount amount withdraw\\n  function withdraw(address token, uint256 amount) public override onlyOwner {\\n    IERC20(token).safeTransfer(treasury, amount);\\n  }\\n\\n  /// @notice Bond rewards balance: amount and already claimed\\n  /// @return rewards Amount of rewards\\n  /// @return rewardsClaimed Amount of rewards already claimed\\n  /// @return rewardsClaimable Amount of still claimable rewards\\n  function rewardsOf(address addr)\\n    public\\n    view\\n    override\\n    returns (\\n      uint256 rewards,\\n      uint256 rewardsClaimed,\\n      uint256 rewardsClaimable\\n    )\\n  {\\n    for (uint256 index = 0; index < bonds[addr].length; index += 1) {\\n      (uint256 bondRewards, uint256 bondClaimedRewards, uint256 bondClaimableRewards) = rewardsBondOf(addr, index);\\n      rewards += bondRewards;\\n      rewardsClaimed += bondClaimedRewards;\\n      rewardsClaimable += bondClaimableRewards;\\n    }\\n  }\\n\\n  /// @notice Bond rewards balance: amount and already claimed\\n  /// @return rewards Amount of rewards\\n  /// @return rewardsClaimed Amount of rewards already claimed\\n  /// @return rewardsClaimable Amount of still claimable rewards\\n  function rewardsBondOf(address addr, uint256 index)\\n    public\\n    view\\n    override\\n    returns (\\n      uint256 rewards,\\n      uint256 rewardsClaimed,\\n      uint256 rewardsClaimable\\n    )\\n  {\\n    Bond memory bnd = bonds[addr][index];\\n    rewards = bnd.rewards;\\n    rewardsClaimed = bnd.claimed;\\n    rewardsClaimable = _bondClaimableRewards(bnd);\\n  }\\n\\n  /// @notice Get number of bonds for address\\n  /// @return number of bonds\\n  function bondsCount(address addr) public view override returns (uint256) {\\n    return bonds[addr].length;\\n  }\\n\\n  /// @dev calculate claimable rewards during vesting period, or all claimable rewards after, minus already claimed\\n  function _bondClaimableRewards(Bond memory bnd) internal view returns (uint256 claimable) {\\n    assert(block.number >= bnd.block);\\n\\n    uint256 blocks = block.number - bnd.block;\\n    uint256 totalClaimable;\\n\\n    if (blocks < vestingBlocks) {\\n      totalClaimable = (bnd.rewards * blocks) / vestingBlocks;\\n    } else {\\n      totalClaimable = bnd.rewards;\\n    }\\n\\n    assert(totalClaimable >= bnd.claimed);\\n    claimable = totalClaimable - bnd.claimed;\\n  }\\n}\\n\",\"keccak256\":\"0x6734026fc5b21fa4c4d2b994ec07c73e020aa985239768472969288b13a75405\",\"license\":\"MIT\"},\"contracts/interfaces/ISimpleBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ISimpleBond {\\n  event LogSetRewards(address token, uint256 rewardsRatio);\\n\\n  event LogBond(address addr, address token, uint256 amount, uint256 rewards, uint256 block, uint256 bondId);\\n\\n  event LogClaim(address addr, uint256 index, uint256 rewards);\\n\\n  function setRewards(address token, uint256 tokenRewardsRatio) external;\\n\\n  function setTreasury(address treasury) external;\\n\\n  function setVestingBlocks(uint256 vestingBlocks_) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function bond(address token, uint256 amount) external returns (uint256 bondId);\\n\\n  function bondsCount(address token) external returns (uint256 bondNb);\\n\\n  function claim() external returns (uint256 claimed);\\n\\n  function claimBond(uint256 index) external returns (uint256 claimed);\\n\\n  function withdraw(address token, uint256 amount) external;\\n\\n  function rewardsOf(address addr)\\n    external\\n    view\\n    returns (\\n      uint256 rewards,\\n      uint256 rewardsClaimed,\\n      uint256 rewardsClaimable\\n    );\\n\\n  function rewardsBondOf(address addr, uint256 index)\\n    external\\n    view\\n    returns (\\n      uint256 rewards,\\n      uint256 rewardsClaimed,\\n      uint256 rewardsClaimable\\n    );\\n}\\n\",\"keccak256\":\"0x85b3e76302dedf5f160f42ee8abf3e9cd04bb1af852519aef919292fdb6c48af\",\"license\":\"MIT\"},\"contracts/interfaces/IUAR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IUAR {\\n  function raiseCapital(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x29426b3e7cab2ed8b9b792db42f5dde1cc8f3febc79dd94598166986cfdb9f2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200173b3803806200173b8339810160408190526200003491620002a8565b6200003f33620000d4565b6000805460ff60a01b191690556001600160a01b038316620000a85760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642052657761726420746f6b656e00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316608052620000c08262000124565b620000cb81620001c6565b505050620002e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200016f5760405162461bcd60e51b815260206004820181905260248201526000805160206200171b83398151915260448201526064016200009f565b60008111620001c15760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642056657374696e6720626c6f636b73206e756d62657200000060448201526064016200009f565b600255565b6000546001600160a01b03163314620002115760405162461bcd60e51b815260206004820181905260248201526000805160206200171b83398151915260448201526064016200009f565b6001600160a01b038116620002695760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642054726561737572792061646472657373000000000000000060448201526064016200009f565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b0381168114620002a357600080fd5b919050565b600080600060608486031215620002be57600080fd5b620002c9846200028b565b925060208401519150620002e0604085016200028b565b90509250925092565b608051611408620003136000396000818161015701528181610490015261050401526114086000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806380c15aaa116100c3578063d578ceab1161007c578063d578ceab14610318578063eafba8be14610321578063f0f4426014610334578063f2fde38b14610347578063f3fef3a31461035a578063fee1a9c81461036d57600080fd5b806380c15aaa1461029d5780638456cb59146102b05780638da5cb5b146102b8578063a515366a146102c9578063ac43f366146102dc578063b451ae4a146102ef57600080fd5b80633f4ba83a116101155780633f4ba83a14610225578063479ba7ae1461022f5780634e71d92d1461025d5780635c975abb1461026557806361d027b314610282578063715018a61461029557600080fd5b8063091c76f5146101525780630e15561a146101965780631c08c08e146101ad578063202160fd146101c0578063327d83b8146101e0575b600080fd5b6101797f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61019f60045481565b60405190815260200161018d565b61019f6101bb3660046111aa565b610376565b61019f6101ce3660046111df565b60016020526000908152604090205481565b6101f36101ee3660046111fa565b610577565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a00161018d565b61022d6105cf565b005b61024261023d3660046111df565b610603565b6040805193845260208401929092529082015260600161018d565b61019f610682565b600054600160a01b900460ff16604051901515815260200161018d565b600654610179906001600160a01b031681565b61022d6106f2565b61022d6102ab3660046111fa565b610726565b61022d6107f5565b6000546001600160a01b0316610179565b61019f6102d73660046111fa565b610827565b61022d6102ea3660046111aa565b610a33565b61019f6102fd3660046111df565b6001600160a01b031660009081526003602052604090205490565b61019f60055481565b61024261032f3660046111fa565b610ab2565b61022d6103423660046111df565b610b55565b61022d6103553660046111df565b610bf7565b61022d6103683660046111fa565b610c92565b61019f60025481565b60008054600160a01b900460ff16156103aa5760405162461bcd60e51b81526004016103a190611224565b60405180910390fd5b3360009081526003602052604081208054849081106103cb576103cb61124e565b600091825260208083206040805160a081018252600590940290910180546001600160a01b031684526001810154928401929092526002820154908301526003810154606083015260048101546080830152925061042890610cda565b9050801561052f5780826003016000828254610444919061127a565b92505081905550806005600082825461045d919061127a565b909155505060028201546003830154111561047a5761047a611292565b604051636310dfc560e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c621bf8a90602401600060405180830381600087803b1580156104dc57600080fd5b505af11580156104f0573d6000803e3d6000fd5b505060065461052f92506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169250163384610d66565b60408051338152602081018690529081018490527f9a4772cd5c0946aaea956f025c3bd64f5b4464abfaa006dbfc1ffe104b89ef2f9060600160405180910390a15050919050565b6003602052816000526040600020818154811061059357600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039093169550909350919085565b6000546001600160a01b031633146105f95760405162461bcd60e51b81526004016103a1906112a8565b610601610dd7565b565b60008080805b6001600160a01b03851660009081526003602052604090205481101561067a5760008060006106388885610ab2565b91945092509050610649838861127a565b9650610655828761127a565b9550610661818661127a565b9450505050600181610673919061127a565b9050610609565b509193909250565b60008054600160a01b900460ff16156106ad5760405162461bcd60e51b81526004016103a190611224565b60005b336000908152600360205260409020548110156106ee576106d081610376565b6106da908361127a565b91506106e760018261127a565b90506106b0565b5090565b6000546001600160a01b0316331461071c5760405162461bcd60e51b81526004016103a1906112a8565b6106016000610e74565b6000546001600160a01b031633146107505760405162461bcd60e51b81526004016103a1906112a8565b6001600160a01b03821661079d5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b2102932bbb0b932103a37b5b2b760611b60448201526064016103a1565b6001600160a01b038216600081815260016020908152604091829020849055815192835282018390527f6510bc177b221b83db45f8daeddbea4c053d983b9505fd7a4810528e5e5826cb910160405180910390a15050565b6000546001600160a01b0316331461081f5760405162461bcd60e51b81526004016103a1906112a8565b610601610ec4565b60008054600160a01b900460ff16156108525760405162461bcd60e51b81526004016103a190611224565b6001600160a01b0383166000908152600160205260409020546108ab5760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b60448201526064016103a1565b6108c06001600160a01b038416333085610d66565b6108fb6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03841680825260208083018590524360808401526000918252600190526040812054633b9aca009061093490866112dd565b61093e91906112fc565b905080826040018181525050806004600082825461095c919061127a565b90915550503360008181526003602081815260408084208054600180820183559186529483902088516005870290910180546001600160a01b0319166001600160a01b0390921691821781558985015192810183905589840151600282018190556060808c0151978301979097556080808c015160049093018390558551998a5295890192909252928701919091529285019290925283015260a0820181905293507f052c36ae0feaf423139c51ade3446fd2170796d06cb1fb368243a368921ed79b9060c00160405180910390a1505092915050565b6000546001600160a01b03163314610a5d5760405162461bcd60e51b81526004016103a1906112a8565b60008111610aad5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c69642056657374696e6720626c6f636b73206e756d62657200000060448201526064016103a1565b600255565b6001600160a01b038216600090815260036020526040812080548291829182919086908110610ae357610ae361124e565b60009182526020918290206040805160a081018252600590930290910180546001600160a01b031683526001810154938301939093526002830154908201819052600383015460608301819052600490930154608083015295509093509050610b4b81610cda565b9150509250925092565b6000546001600160a01b03163314610b7f5760405162461bcd60e51b81526004016103a1906112a8565b6001600160a01b038116610bd55760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642054726561737572792061646472657373000000000000000060448201526064016103a1565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c215760405162461bcd60e51b81526004016103a1906112a8565b6001600160a01b038116610c865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a1565b610c8f81610e74565b50565b6000546001600160a01b03163314610cbc5760405162461bcd60e51b81526004016103a1906112a8565b600654610cd6906001600160a01b03848116911683610f29565b5050565b60008160800151431015610cf057610cf0611292565b6000826080015143610d02919061131e565b90506000600254821015610d3457600254828560400151610d2391906112dd565b610d2d91906112fc565b9050610d3b565b5060408301515b8360600151811015610d4f57610d4f611292565b6060840151610d5e908261131e565b949350505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610dd19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f5e565b50505050565b600054600160a01b900460ff16610e275760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103a1565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615610eee5760405162461bcd60e51b81526004016103a190611224565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e573390565b6040516001600160a01b038316602482015260448101829052610f5990849063a9059cbb60e01b90606401610d9a565b505050565b6000610fb3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110309092919063ffffffff16565b805190915015610f595780806020019051810190610fd19190611335565b610f595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103a1565b606061103f8484600085611049565b90505b9392505050565b6060824710156110aa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103a1565b843b6110f85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a1565b600080866001600160a01b031685876040516111149190611383565b60006040518083038185875af1925050503d8060008114611151576040519150601f19603f3d011682016040523d82523d6000602084013e611156565b606091505b5091509150611166828286611171565b979650505050505050565b60608315611180575081611042565b8251156111905782518084602001fd5b8160405162461bcd60e51b81526004016103a1919061139f565b6000602082840312156111bc57600080fd5b5035919050565b80356001600160a01b03811681146111da57600080fd5b919050565b6000602082840312156111f157600080fd5b611042826111c3565b6000806040838503121561120d57600080fd5b611216836111c3565b946020939093013593505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561128d5761128d611264565b500190565b634e487b7160e01b600052600160045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008160001904831182151516156112f7576112f7611264565b500290565b60008261131957634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561133057611330611264565b500390565b60006020828403121561134757600080fd5b8151801515811461104257600080fd5b60005b8381101561137257818101518382015260200161135a565b83811115610dd15750506000910152565b60008251611395818460208701611357565b9190910192915050565b60208152600082518060208401526113be816040850160208701611357565b601f01601f1916919091016040019291505056fea2646970667358221220fef6f2305160d0533dda24c44fa8d739cb6d41adb46ff12c2033547d1e6df38964736f6c634300080900334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "",
  "devdoc": {
    "author": "zapaz.eth",
    "details": "Bond is Ownable, access controled by onlyOwnerUse SafeERC20",
    "kind": "dev",
    "methods": {
      "bond(address,uint256)": {
        "params": {
          "amount": "amount of token to bond",
          "token": "bonded token address"
        },
        "returns": {
          "bondId": "Bond id"
        }
      },
      "bondsCount(address)": {
        "returns": {
          "_0": "number of bonds"
        }
      },
      "claim()": {
        "returns": {
          "claimed": "Rewards claimed succesfully"
        }
      },
      "claimBond(uint256)": {
        "returns": {
          "claimed": "Rewards claimed succesfully"
        }
      },
      "constructor": {
        "params": {
          "tokenRewards_": "Rewards token address",
          "vestingBlocks_": "Vesting duration in blocks"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardsBondOf(address,uint256)": {
        "returns": {
          "rewards": "Amount of rewards",
          "rewardsClaimable": "Amount of still claimable rewards",
          "rewardsClaimed": "Amount of rewards already claimed"
        }
      },
      "rewardsOf(address)": {
        "returns": {
          "rewards": "Amount of rewards",
          "rewardsClaimable": "Amount of still claimable rewards",
          "rewardsClaimed": "Amount of rewards already claimed"
        }
      },
      "setRewards(address,uint256)": {
        "params": {
          "token": "token address",
          "tokenRewardsRatio": "rewardsRatio for this token"
        }
      },
      "setTreasury(address)": {
        "params": {
          "treasury_": "treasury address"
        }
      },
      "setVestingBlocks(uint256)": {
        "params": {
          "vestingBlocks_": "vesting duration in blocks"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "amount withdraw",
          "token": "token withdraw"
        }
      }
    },
    "stateVariables": {
      "bonds": {
        "details": "bond index starts at 0 for each address"
      },
      "rewardsRatio": {
        "details": "rewardsRatio is per billion of token bonded"
      },
      "vestingBlocks": {
        "details": "defined in number of block"
      }
    },
    "title": "Simple Bond",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bond(address,uint256)": {
        "notice": "Bond tokens"
      },
      "bonds(address,uint256)": {
        "notice": "Bonds for each address"
      },
      "bondsCount(address)": {
        "notice": "Get number of bonds for address"
      },
      "claim()": {
        "notice": "Claim all rewards"
      },
      "claimBond(uint256)": {
        "notice": "Claim bond rewards"
      },
      "constructor": {
        "notice": "Simple Bond constructor"
      },
      "pause()": {
        "notice": "Pause Bonding and Claiming"
      },
      "rewardsBondOf(address,uint256)": {
        "notice": "Bond rewards balance: amount and already claimed"
      },
      "rewardsOf(address)": {
        "notice": "Bond rewards balance: amount and already claimed"
      },
      "rewardsRatio(address)": {
        "notice": "Rewards ratio for token bonded"
      },
      "setRewards(address,uint256)": {
        "notice": "Set Rewards for specific Token"
      },
      "setTreasury(address)": {
        "notice": "Set treasury address"
      },
      "setVestingBlocks(uint256)": {
        "notice": "Set vesting duration"
      },
      "tokenRewards()": {
        "notice": "Rewards token address"
      },
      "totalClaimedRewards()": {
        "notice": "Total rewards claimed"
      },
      "totalRewards()": {
        "notice": "Total rewards"
      },
      "treasury()": {
        "notice": "Treasury address"
      },
      "unpause()": {
        "notice": "Unpause Bonding and Claiming"
      },
      "vestingBlocks()": {
        "notice": "Vesting period"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw token from the smartcontract, only for owner"
      }
    },
    "notice": "SimpleBond is a simple Bond mecanism, allowing to sell tokens bonded and get rewards tokensThe reward token is fully claimable only after the vesting period",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3552,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "rewardsRatio",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3555,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "vestingBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3562,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "bonds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(Bond)3544_storage)dyn_storage)"
      },
      {
        "astId": 3565,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "totalRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3568,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "totalClaimedRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3571,
        "contract": "contracts/SimpleBond.sol:SimpleBond",
        "label": "treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bond)3544_storage)dyn_storage": {
        "base": "t_struct(Bond)3544_storage",
        "encoding": "dynamic_array",
        "label": "struct SimpleBond.Bond[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Bond)3544_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SimpleBond.Bond[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bond)3544_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bond)3544_storage": {
        "encoding": "inplace",
        "label": "struct SimpleBond.Bond",
        "members": [
          {
            "astId": 3535,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3537,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3539,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3541,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "claimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3543,
            "contract": "contracts/SimpleBond.sol:SimpleBond",
            "label": "block",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}